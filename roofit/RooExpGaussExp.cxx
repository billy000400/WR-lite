/**
 * @Author: Billy Li <billyli>
 * @Date:   05-16-2022
 * @Email:  li000400@umn.edu
 * @Last modified by:   billyli
 * @Last modified time: 05-16-2022
 */



/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            *
 *****************************************************************************/

// Your description goes here...

#include "Riostream.h"

#include "RooExpGaussExp.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
#include <math.h>
#include "TMath.h"

ClassImp(RooExpGaussExp);

 RooExpGaussExp::RooExpGaussExp(const char *name, const char *title,
                        RooAbsReal& _x,
                        RooAbsReal& _mu,
                        RooAbsReal& _sigma,
                        RooAbsReal& _m,
                        RooAbsReal& _n) :
   RooAbsPdf(name,title),
   x("x","x",this,_x),
   mu("mu","mu",this,_mu),
   sigma("sigma","sigma",this,_sigma),
   m("m","m",this,_m),
   n("n","n",this,_n)
 {
 }


 RooExpGaussExp::RooExpGaussExp(const RooExpGaussExp& other, const char* name) :
   RooAbsPdf(other,name),
   x("x",this,other.x),
   mu("mu",this,other.mu),
   sigma("sigma",this,other.sigma),
   m("m",this,other.m),
   n("n",this,other.n)
 {
 }



 Double_t RooExpGaussExp::evaluate() const
 {
     Double_t t = (x-mu)/sigma;

     Double_t absm = fabs((Double_t)m);
     Double_t absn = fabs((Double_t)n);

     if (t < -absn){

         Double_t A = exp(0.5*absn*absn);
         return A*exp(absn*t);

     } else if (t < absm) {

       return exp(-0.5*t*t);

     }
     else {
         Double_t A = exp(0.5*absm*absm);
         return A*exp(absm*t);
     }
 }
