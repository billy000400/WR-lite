/**
 * @Author: Billy Li <billyli>
 * @Date:   04-25-2022
 * @Email:  li000400@umn.edu
 * @Last modified by:   billyli
 * @Last modified time: 04-25-2022
 */



/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            *
 *****************************************************************************/

// Your description goes here...

#include "Riostream.h"

#include "RooCBShape_MN.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
#include <math.h>
#include "TMath.h"

ClassImp(RooCBShape_MN);

 RooCBShape_MN::RooCBShape_MN(const char *name, const char *title,
                        RooAbsReal& _m,
                        RooAbsReal& _m0,
                        RooAbsReal& _sigma,
                        RooAbsReal& _alpha,
                        RooAbsReal& _n) :
   RooAbsPdf(name,title),
   m("m","m",this,_m),
   m0("m0","m0",this,_m0),
   sigma("sigma","sigma",this,_sigma),
   alpha("alpha","alpha",this,_alpha),
   n("n","n",this,_n)
 {
 }


 RooCBShape_MN::RooCBShape_MN(const RooCBShape_MN& other, const char* name) :
    RooAbsPdf(other,name),
    m("m",this,other.m),
    m0("m0",this,other.m0),
    sigma("sigma",this,other.sigma),
    alpha("alpha",this,other.alpha),
    n("n",this,other.n)
 {
 }


 Double_t RooCBShape_MN::evaluate() const
 {
   Double_t t = (m-m0)/sigma;
   if (alpha < 0) t = -t;

  Double_t absAlpha = fabs((Double_t)alpha);
  if (t >= -absAlpha) {
    return exp(-0.5*t*t);
  }
  else {
    // Double_t a =  TMath::Power(n/absAlpha,n)*exp(-0.5*absAlpha*absAlpha);
    // Double_t b= n/absAlpha - absAlpha;

    // return a/TMath::Power(b - t, n);

    Double_t exp_part = exp(-0.5*absAlpha*absAlpha);
    Double_t D = (n-absAlpha*absAlpha-absAlpha*t);
    Double_t arg = n/D;

    return TMath::Power(arg, n)*exp_part;
  }
 }

